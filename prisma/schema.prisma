generator client {
    provider        = "prisma-client-js"
    previewFeatures = []
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum WineType {
    RED
    WHITE
    ROSE
}

model Wine {
    id Int @id @default(autoincrement())

    name     String   @db.Text
    year     Int
    type     WineType
    varietal String   @db.Text
    rating   Float

    wineryKey String  @db.Text
    note      String  @db.Text
    imageUrl  String?

    wineBottles WineBottle[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([createdById])
}

model WineBottle {
    id Int @id @default(autoincrement())

    consumed     Boolean
    dateConsumed DateTime?
    note         String    @db.Text

    counter Int @default(0) // Used for counting wines for user

    wine   Wine @relation(fields: [wineId], references: [id], onDelete: Cascade)
    wineId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([wineId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    image         String?

    version Int @default(1)

    accounts Account[]
    sessions Session[]
    wines    Wine[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
